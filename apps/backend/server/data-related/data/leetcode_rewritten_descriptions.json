{
    "rewrittenDescriptions": [
        {
            "id": 1,
            "rewrittenDescription": "<p>You are given an array of integers <code>values</code> and a specific integer <code>sum</code>. Find the positions of two distinct elements that together equal the given <code>sum</code>.</p><p>Assume that there is <strong>exactly one valid pair</strong> in the input, and you cannot use the same element position twice.</p><p>Return the positions in any order.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> values = [4,11,15,20], sum = 15<br><strong>Output:</strong> [0,1]<br><strong>Explanation:</strong> values[0] + values[1] = 4 + 11 = 15</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> values = [5,7,11], sum = 12<br><strong>Output:</strong> [0,1]</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> values = [6,6], sum = 12<br><strong>Output:</strong> [0,1]</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= values.length &lt;= 10<sup>4</sup></code></li><li><code>-10<sup>9</sup> &lt;= values[i] &lt;= 10<sup>9</sup></code></li><li><code>-10<sup>9</sup> &lt;= sum &lt;= 10<sup>9</sup></code></li><li><strong>Exactly one solution exists.</strong></li></ul><p>&nbsp;</p><strong>Optimization Challenge:</strong> Can you devise a solution with time complexity better than <code>O(n<sup>2</sup>)</code>?"
        },
        {
            "id": 2,
            "rewrittenDescription": "<p>You have two <strong>non-empty</strong> linked lists that represent two positive integers. The digits are arranged in <strong>reverse order</strong> where each node holds a single digit. Calculate the sum of these two numbers and return it as a linked list.</p><p>You can assume neither number has leading zeros, except for the number 0 itself.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> first = [3,4,2], second = [4,6,5]<br><strong>Output:</strong> [7,0,8]<br><strong>Explanation:</strong> 243 + 564 = 807</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> first = [0], second = [0]<br><strong>Output:</strong> [0]</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> first = [9,9,9,9,9,9,9], second = [9,9,9,9]<br><strong>Output:</strong> [8,9,9,9,0,0,0,1]</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li>Each linked list contains between <code>[1, 100]</code> nodes.</li><li><code>0 &lt;= Node.value &lt;= 9</code></li><li>The numbers represented do not have leading zeros.</li></ul>"
        },
        {
            "id": 3,
            "rewrittenDescription": "<p>Given a string <code>text</code>, determine the length of the <strong>longest contiguous sequence</strong> of characters where no character appears more than once.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> text = \"xyzxyzaa\"<br><strong>Output:</strong> 3<br><strong>Explanation:</strong> The longest sequence is \"xyz\" with length 3.</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> text = \"aaaaa\"<br><strong>Output:</strong> 1<br><strong>Explanation:</strong> The longest sequence is \"a\" with length 1.</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> text = \"abcdef\"<br><strong>Output:</strong> 6<br><strong>Explanation:</strong> The entire string \"abcdef\" has no repeating characters.</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= text.length &lt;= 5 * 10<sup>4</sup></code></li><li><code>text</code> contains English letters, numbers, symbols and spaces.</li></ul>"
        },
        {
            "id": 4,
            "rewrittenDescription": "<p>Given two sorted arrays <code>arr1</code> and <code>arr2</code> with lengths <code>m</code> and <code>n</code> respectively, find <strong>the median value</strong> when both arrays are conceptually merged.</p><p>Your solution must run in <code>O(log (m+n))</code> time complexity.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> arr1 = [1,3], arr2 = [2]<br><strong>Output:</strong> 2.00000<br><strong>Explanation:</strong> Combined array = [1,2,3], median = 2</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> arr1 = [1,2], arr2 = [3,4]<br><strong>Output:</strong> 2.50000<br><strong>Explanation:</strong> Combined array = [1,2,3,4], median = (2 + 3) / 2 = 2.5</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>arr1.length == m</code></li><li><code>arr2.length == n</code></li><li><code>0 &lt;= m &lt;= 1000</code></li><li><code>0 &lt;= n &lt;= 1000</code></li><li><code>1 &lt;= m + n &lt;= 2000</code></li><li><code>-10<sup>6</sup> &lt;= arr1[i], arr2[i] &lt;= 10<sup>6</sup></code></li></ul>"
        },
        {
            "id": 5,
            "rewrittenDescription": "<p>Given a string <code>text</code>, find and return <em>the longest</em> <strong>palindromic sequence</strong> within it.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> text = \"racecar\"<br><strong>Output:</strong> \"racecar\"<br><strong>Explanation:</strong> The entire string is a palindrome.</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> text = \"hello\"<br><strong>Output:</strong> \"ll\"</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= text.length &lt;= 1000</code></li><li><code>text</code> consists of digits and English letters only.</li></ul>"
        },
        {
            "id": 6,
            "rewrittenDescription": "<p>Transform a string into a wave pattern across <code>rows</code> lines, then read it line by line to create a new arrangement.</p><p>For example, \"HELLOWORLD\" with 3 rows becomes:</p><pre>H   O   R<br>E L W O L<br>L   L   D</pre><p>Reading line by line gives: \"HORELWOLLLD\"</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> text = \"HELLOWORLD\", rows = 3<br><strong>Output:</strong> \"HORELWOLLLD\"</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> text = \"HELLOWORLD\", rows = 4<br><strong>Output:</strong> \"HOERLWLOLD\"</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> text = \"A\", rows = 1<br><strong>Output:</strong> \"A\"</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= text.length &lt;= 1000</code></li><li><code>text</code> contains English letters, commas, and periods.</li><li><code>1 &lt;= rows &lt;= 1000</code></li></ul>"
        },
        {
            "id": 7,
            "rewrittenDescription": "<p>Given a 32-bit signed integer <code>num</code>, return the integer with its digits in <em>reverse order</em>. If the reversed number exceeds the 32-bit signed range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, return <code>0</code>.</p><p><strong>Note: You cannot use 64-bit integers for intermediate calculations.</strong></p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> num = 456<br><strong>Output:</strong> 654</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> num = -456<br><strong>Output:</strong> -654</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> num = 1200<br><strong>Output:</strong> 21</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>-2<sup>31</sup> &lt;= num &lt;= 2<sup>31</sup> - 1</code></li></ul>"
        },
        {
            "id": 8,
            "rewrittenDescription": "<p>Create a function <code>parseInteger(string input)</code> that converts a string to a 32-bit signed integer following these rules:</p><ol><li><strong>Skip whitespace:</strong> Ignore leading spaces.</li><li><strong>Handle signs:</strong> Check for '+' or '-', assume positive if neither.</li><li><strong>Parse digits:</strong> Read digits until a non-digit is found or string ends. Skip leading zeros. If no digits found, result is 0.</li><li><strong>Apply bounds:</strong> Clamp the result to 32-bit signed integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>.</li></ol><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> input = \"987\"<br><strong>Output:</strong> 987</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> input = \"  -042\"<br><strong>Output:</strong> -42</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> input = \"1234hello\"<br><strong>Output:</strong> 1234</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= input.length &lt;= 200</code></li><li><code>input</code> contains English letters, digits, spaces, '+', '-', and '.'.</li></ul>"
        },
        {
            "id": 9,
            "rewrittenDescription": "<p>Given an integer <code>number</code>, determine if it reads the same forwards and backwards.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> number = 131<br><strong>Output:</strong> true<br><strong>Explanation:</strong> 131 reads the same in both directions.</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> number = -131<br><strong>Output:</strong> false<br><strong>Explanation:</strong> Reads -131 forward but 131- backward.</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> number = 10<br><strong>Output:</strong> false<br><strong>Explanation:</strong> Reads 10 forward but 01 backward.</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>-2<sup>31</sup> &lt;= number &lt;= 2<sup>31</sup> - 1</code></li></ul><p>&nbsp;</p><strong>Challenge:</strong> Solve without converting to string."
        },
        {
            "id": 10,
            "rewrittenDescription": "<p>Given a text string <code>str</code> and a pattern <code>regex</code>, implement pattern matching with these special characters:</p><ul><li><code>'.'</code> matches any single character</li><li><code>'*'</code> matches zero or more occurrences of the preceding character</li></ul><p>The match must cover the <strong>complete</strong> input string.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> str = \"aa\", regex = \"a\"<br><strong>Output:</strong> false<br><strong>Explanation:</strong> \"a\" doesn't match the full string \"aa\".</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> str = \"aa\", regex = \"a*\"<br><strong>Output:</strong> true<br><strong>Explanation:</strong> '*' means zero or more 'a' characters.</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> str = \"ab\", regex = \".*\"<br><strong>Output:</strong> true<br><strong>Explanation:</strong> \".*\" means any sequence of characters.</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= str.length &lt;= 20</code></li><li><code>1 &lt;= regex.length &lt;= 20</code></li><li><code>str</code> contains lowercase English letters only.</li><li><code>regex</code> contains lowercase English letters, '.', and '*'.</li><li>Every '*' has a valid preceding character.</li></ul>"
        },
        {
            "id": 11,
            "rewrittenDescription": "<p>You have an array <code>walls</code> representing the heights of vertical barriers. Each barrier extends from position <code>i</code> on the x-axis with height <code>walls[i]</code>.</p><p>Choose two barriers that can hold the maximum amount of water between them when combined with the ground.</p><p>Return <em>the maximum water capacity</em>.</p><p><strong>Note:</strong> The container cannot be tilted.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> walls = [1,8,6,2,5,4,8,3,7]<br><strong>Output:</strong> 49<br><strong>Explanation:</strong> The barriers at positions 1 and 8 (heights 8 and 7) create the largest container.</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> walls = [1,1]<br><strong>Output:</strong> 1</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>n == walls.length</code></li><li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li><li><code>0 &lt;= walls[i] &lt;= 10<sup>4</sup></code></li></ul>"
        },
        {
            "id": 12,
            "rewrittenDescription": "<p>Convert a decimal number to its Roman numeral representation using these symbols and values:</p><table><thead><tr><th>Symbol</th><th>Value</th></tr></thead><tbody><tr><td>I</td><td>1</td></tr><tr><td>V</td><td>5</td></tr><tr><td>X</td><td>10</td></tr><tr><td>L</td><td>50</td></tr><tr><td>C</td><td>100</td></tr><tr><td>D</td><td>500</td></tr><tr><td>M</td><td>1000</td></tr></tbody></table><p>Roman numerals follow these construction rules:</p><ul><li>Values are typically written largest to smallest, left to right</li><li>When a smaller symbol precedes a larger one, it represents subtraction</li><li>Valid subtractive combinations: IV (4), IX (9), XL (40), XC (90), CD (400), CM (900)</li><li>Only I, X, C, M can appear consecutively up to 3 times</li></ul><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> decimal = 3749<br><strong>Output:</strong> \"MMMDCCXLIX\"</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> decimal = 58<br><strong>Output:</strong> \"LVIII\"</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> decimal = 1994<br><strong>Output:</strong> \"MCMXCIV\"</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= decimal &lt;= 3999</code></li></ul>"
        },
        {
            "id": 13,
            "rewrittenDescription": "<p>Convert a Roman numeral string to its decimal equivalent. Roman numerals use these seven symbols:</p><pre><strong>Symbol</strong>    <strong>Value</strong><br>I          1<br>V          5<br>X          10<br>L          50<br>C          100<br>D          500<br>M          1000</pre><p>Roman numerals are typically written from largest to smallest, left to right. However, subtraction occurs when a smaller symbol precedes a larger one:</p><ul><li><code>I</code> before <code>V</code> (5) or <code>X</code> (10) makes 4 or 9</li><li><code>X</code> before <code>L</code> (50) or <code>C</code> (100) makes 40 or 90</li><li><code>C</code> before <code>D</code> (500) or <code>M</code> (1000) makes 400 or 900</li></ul><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> roman = \"III\"<br><strong>Output:</strong> 3</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> roman = \"LVIII\"<br><strong>Output:</strong> 58<br><strong>Explanation:</strong> L = 50, V = 5, III = 3</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> roman = \"MCMXCIV\"<br><strong>Output:</strong> 1994<br><strong>Explanation:</strong> M = 1000, CM = 900, XC = 90, IV = 4</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= roman.length &lt;= 15</code></li><li><code>roman</code> contains only valid Roman numeral characters</li><li>The input represents a valid number in range <code>[1, 3999]</code></li></ul>"
        },
        {
            "id": 14,
            "rewrittenDescription": "<p>Find the longest shared prefix among all strings in an array.</p><p>If no common prefix exists, return an empty string <code>\"\"</code>.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> words = [\"flower\",\"flow\",\"flight\"]<br><strong>Output:</strong> \"fl\"</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> words = [\"dog\",\"racecar\",\"car\"]<br><strong>Output:</strong> \"\"<br><strong>Explanation:</strong> No shared prefix exists.</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= words.length &lt;= 200</code></li><li><code>0 &lt;= words[i].length &lt;= 200</code></li><li><code>words[i]</code> contains only lowercase English letters when non-empty.</li></ul>"
        },
        {
            "id": 15,
            "rewrittenDescription": "<p>Given an integer array <code>numbers</code>, find all unique triplets where the three numbers sum to zero.</p><p>The result must not contain duplicate triplets.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> numbers = [-1,0,1,2,-1,-4]<br><strong>Output:</strong> [[-1,-1,2],[-1,0,1]]<br><strong>Explanation:</strong> <br>numbers[0] + numbers[1] + numbers[2] = (-1) + 0 + 1 = 0<br>numbers[1] + numbers[2] + numbers[4] = 0 + 1 + (-1) = 0<br>numbers[0] + numbers[3] + numbers[4] = (-1) + 2 + (-1) = 0</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> numbers = [0,1,1]<br><strong>Output:</strong> []<br><strong>Explanation:</strong> No triplet sums to 0.</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> numbers = [0,0,0]<br><strong>Output:</strong> [[0,0,0]]</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>3 &lt;= numbers.length &lt;= 3000</code></li><li><code>-10<sup>5</sup> &lt;= numbers[i] &lt;= 10<sup>5</sup></code></li></ul>"
        },
        {
            "id": 16,
            "rewrittenDescription": "<p>Given an array <code>numbers</code> and a <code>goal</code> value, find three integers whose sum is closest to the <code>goal</code>.</p><p>Return <em>the sum of those three integers</em>.</p><p>Each input has exactly one solution.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> numbers = [-1,2,1,-4], goal = 1<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> The closest sum to goal is 2 (-1 + 2 + 1 = 2).</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> numbers = [0,0,0], goal = 1<br><strong>Output:</strong> 0<br><strong>Explanation:</strong> The closest sum to goal is 0 (0 + 0 + 0 = 0).</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>3 &lt;= numbers.length &lt;= 500</code></li><li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li><li><code>-10<sup>4</sup> &lt;= goal &lt;= 10<sup>4</sup></code></li></ul>"
        },
        {
            "id": 17,
            "rewrittenDescription": "<p>Given a string of digits from <code>2-9</code>, return all possible letter combinations that could represent these digits on a phone keypad.</p><p>Digit-to-letter mapping (similar to phone keypads):<br>2: abc, 3: def, 4: ghi, 5: jkl, 6: mno, 7: pqrs, 8: tuv, 9: wxyz</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> digits = \"23\"<br><strong>Output:</strong> [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> digits = \"\"<br><strong>Output:</strong> []</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> digits = \"2\"<br><strong>Output:</strong> [\"a\",\"b\",\"c\"]</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= digits.length &lt;= 4</code></li><li><code>digits[i]</code> is between '2' and '9'.</li></ul>"
        },
        {
            "id": 18,
            "rewrittenDescription": "<p>Given an array <code>values</code>, find all unique sets of four numbers that sum to a <code>target</code> value.</p><p>Return all unique quadruplets <code>[values[a], values[b], values[c], values[d]]</code> where:</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are distinct indices</li><li><code>values[a] + values[b] + values[c] + values[d] == target</code></li></ul><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> values = [1,0,-1,0,-2,2], target = 0<br><strong>Output:</strong> [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> values = [2,2,2,2,2], target = 8<br><strong>Output:</strong> [[2,2,2,2]]</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= values.length &lt;= 200</code></li><li><code>-10<sup>9</sup> &lt;= values[i] &lt;= 10<sup>9</sup></code></li><li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li></ul>"
        },
        {
            "id": 19,
            "rewrittenDescription": "<p>Given a linked list, remove the <code>k<sup>th</sup></code> node from the end and return the modified list.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> list = [1,2,3,4,5], k = 2<br><strong>Output:</strong> [1,2,3,5]</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> list = [1], k = 1<br><strong>Output:</strong> []</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> list = [1,2], k = 1<br><strong>Output:</strong> [1]</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li>The list contains <code>sz</code> nodes.</li><li><code>1 &lt;= sz &lt;= 30</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li><li><code>1 &lt;= k &lt;= sz</code></li></ul><p>&nbsp;</p><p><strong>Challenge:</strong> Can you solve this in a single pass?</p>"
        },
        {
            "id": 20,
            "rewrittenDescription": "<p>Given a string containing only bracket characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, determine if the brackets are properly matched.</p><p>A string is valid when:</p><ol><li>Opening brackets are closed by matching bracket types.</li><li>Opening brackets are closed in the correct sequence.</li><li>Every closing bracket has a corresponding opening bracket.</li></ol><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> brackets = \"()\"<br><strong>Output:</strong> true</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> brackets = \"()[]{}<br><strong>Output:</strong> true</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> brackets = \"(]\"<br><strong>Output:</strong> false</pre><p><strong class=\"example\">Example 4:</strong></p><pre><strong>Input:</strong> brackets = \"([])\"<br><strong>Output:</strong> true</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= brackets.length &lt;= 10<sup>4</sup></code></li><li><code>brackets</code> consists of bracket characters only.</li></ul>"
        },
        {
            "id": 21,
            "rewrittenDescription": "<p>You're given the starting nodes of two singly linked lists, both of which are sorted in ascending order.</p><p>Combine these lists into a single sorted sequence by linking their existing nodes together, preserving the sort order.</p><p><em>Return the node that begins the newly formed list.</em></p>"
        },
        {
            "id": 22,
            "rewrittenDescription": "<p>Given an integer <code>n</code> representing the number of pairs of parentheses, generate all valid arrangements of these pairs such that every opening bracket is correctly closed.</p><p>Each arrangement must represent a properly balanced sequence.</p>"
        },
        {
            "id": 23,
            "rewrittenDescription": "<p>You are provided with an array containing <code>k</code> singly linked lists. Each individual list is already sorted in ascending order.</p><p>Your task is to combine all the lists into a single sorted linked list and return the head node of this unified list.</p>"
        },
        {
            "id": 24,
            "rewrittenDescription": "<p>Given a singly linked list, rearrange the nodes by swapping every pair of adjacent elements.</p><p>The value of the nodes must remain unchanged—only the structure of the links may be modified.</p><p><em>Return the head of the updated list.</em></p>"
        },
        {
            "id": 25,
            "rewrittenDescription": "<p>Given the head of a linked list and a number <code>k</code>, reverse the list in groups of <code>k</code> consecutive nodes.</p><p>If the number of nodes at the end is fewer than <code>k</code>, leave them unchanged.</p><p>You must perform this operation by altering node connections, not node values.</p>"
        },
        {
            "id": 26,
            "rewrittenDescription": "<p>Given a sorted array of integers, eliminate duplicate values <strong>in-place</strong> so that each unique number appears only once.</p><p>Preserve the original relative order of the unique values and return the count of these distinct elements.</p>"
        },
        {
            "id": 27,
            "rewrittenDescription": "<p>Given an array of integers and a specific value, remove all instances of that value <strong>in-place</strong> and return the count of the remaining elements.</p><p>The relative order of the elements may change, and the content beyond the returned length can be ignored.</p>"
        },
        {
            "id": 28,
            "rewrittenDescription": "<p>Given two strings, identify the index of the first occurrence of one string (the pattern) inside another (the text). If the pattern doesn't appear, return <code>-1</code>.</p>"
        },
        {
            "id": 29,
            "rewrittenDescription": "<p>Given two integers, compute the result of dividing the first by the second <strong>without</strong> using multiplication, division, or modulus operations.</p><p>The result should truncate toward zero. If it falls outside the bounds of a 32-bit signed integer, return the appropriate limit.</p>"
        },
        {
            "id": 30,
            "rewrittenDescription": "<p>You are given a string and a list of words that all share the same length. A valid concatenation uses each word exactly once and in any order, joined together with no gaps.</p><p>Return the starting positions of all such concatenated substrings within the main string.</p>"
        },
        {
            "id": 31,
            "rewrittenDescription": "<p>Given an array of integers, modify it in-place to become the next lexicographically larger permutation. If no such arrangement is possible, rearrange it into the smallest possible order.</p><p>This transformation must be done using only constant extra memory.</p>"
        },
        {
            "id": 32,
            "rewrittenDescription": "<p>Given a string consisting solely of opening and closing parentheses, determine the length of the longest contiguous segment that forms a valid and balanced group of parentheses.</p>"
        },
        {
            "id": 33,
            "rewrittenDescription": "<p>You are given an array of distinct integers that was initially sorted in ascending order, but then rotated at some unknown point.</p><p>Given a target value, return its index if it exists in the array; otherwise, return <code>-1</code>.</p>"
        },
        {
            "id": 33,
            "rewrittenDescription": "<p>You are given an array of unique integers <code>nums</code> that was originally sorted in ascending order.</p><p>At some unknown position, this array might have been rotated so that it now begins from a certain pivot, wrapping around to the start. For instance, an array like <code>[0,1,2,4,5,6,7]</code> could become <code>[4,5,6,7,0,1,2]</code> after rotation.</p><p>Given this possibly rotated array and an integer <code>target</code>, return the <em>index where the target is located</em> within <code>nums</code>. If the target is not present, return <code>-1</code>.</p><p>Your solution should run in <code>O(log n)</code> time complexity.</p>"
        },
        {
            "id": 34,
            "rewrittenDescription": "<p>Given an integer array <code>nums</code> sorted in non-decreasing order, locate the first and last positions where a specified <code>target</code> appears.</p><p>If the target does not exist in the array, return <code>[-1, -1]</code>.</p><p>Your algorithm must operate with a time complexity of <code>O(log n)</code>.</p>"
        },
        {
            "id": 35,
            "rewrittenDescription": "<p>Consider a sorted array <code>nums</code> with distinct integers. Given a target value, determine its position if it exists in the array. If the target is not found, identify the position where it should be inserted to maintain the sorted order.</p><p>Design an algorithm with <code>O(log n)</code> runtime efficiency.</p>"
        },
        {
            "id": 36,
            "rewrittenDescription": "<p>Evaluate whether a given <code>9 x 9</code> Sudoku board configuration is valid.</p><p>The board is partially filled with digits <code>1-9</code> and empty cells represented by <code>'.'</code>. To be considered valid, the following must hold for the filled cells:</p><ol><li>No digit repeats in any row.</li><li>No digit repeats in any column.</li><li>No digit repeats within any of the nine <code>3 x 3</code> subgrids.</li></ol><p>Note that the board does not need to be solvable, only that the current placement of numbers adheres to these constraints.</p>"
        },
        {
            "id": 37,
            "rewrittenDescription": "<p>Fill the empty cells of a Sudoku puzzle represented by a <code>9 x 9</code> board such that the final solution meets the following criteria:</p><ol><li>Each digit from <code>1-9</code> appears exactly once in each row.</li><li>Each digit from <code>1-9</code> appears exactly once in each column.</li><li>Each digit from <code>1-9</code> appears exactly once in each of the nine <code>3 x 3</code> sub-boxes.</li></ol><p>Empty cells are marked with <code>'.'</code>. You can assume there is a single unique solution for the provided puzzle.</p>"
        },
        {
            "id": 38,
            "rewrittenDescription": "<p>The <strong>count-and-say</strong> sequence generates strings based on describing the previous term’s digits.</p><ul><li>The first term is <code>\"1\"</code>.</li><li>Each subsequent term is formed by reading the previous string and encoding consecutive identical digits as a count followed by the digit itself.</li></ul><p>Given an integer <code>n</code>, return the <code>n<sup>th</sup></code> term of this sequence.</p><p>For example, starting from <code>\"1\"</code>, the next terms are built by counting consecutive digits and expressing them as counts plus values.</p>"
        },
        {
            "id": 39,
            "rewrittenDescription": "<p>Given an array of distinct integers <code>candidates</code> and a target number <code>target</code>, find all unique combinations of elements from <code>candidates</code> where the sum equals <code>target</code>.</p><p>You can use the same candidate number multiple times in the combinations. Return all unique sets of numbers that add up to the target in any order.</p><p>The number of valid combinations will be fewer than 150 for the given inputs.</p>"
        },
        {
            "id": 40,
            "rewrittenDescription": "<p>From a collection of candidate numbers <code>candidates</code> and a target sum <code>target</code>, identify all unique combinations where the selected numbers sum to <code>target</code>.</p><p>Each candidate may only be chosen once in each combination.</p><p>Duplicate combinations are not allowed in the output.</p>"
        },
        {
            "id": 41,
            "rewrittenDescription": "<p>You're provided with an unordered array of integers called <code>values</code>. Find and return the <em>smallest positive number</em> that is <em>missing</em> from the array.</p><p>Your solution must operate in <code>O(n)</code> time complexity and use only <code>O(1)</code> extra space.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> values = [1,2,0]<br><strong>Output:</strong> 3<br><strong>Explanation:</strong> All positive integers from 1 to 2 are present in the array.</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> values = [3,4,-1,1]<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> The number 1 exists but 2 is absent.</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> values = [7,8,9,11,12]<br><strong>Output:</strong> 1<br><strong>Explanation:</strong> The first positive integer 1 is not found.</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= values.length &lt;= 10<sup>5</sup></code></li><li><code>-2<sup>31</sup> &lt;= values[i] &lt;= 2<sup>31</sup> - 1</code></li></ul>"
        },
        {
            "id": 42,
            "rewrittenDescription": "<p>You have <code>n</code> vertical bars representing ground elevation levels, where each bar has width <code>1</code>. Calculate the maximum volume of rainwater that can be collected between these bars after a rainfall.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> elevation = [0,1,0,2,1,0,1,3,2,1,2,1]<br><strong>Output:</strong> 6<br><strong>Explanation:</strong> The terrain can collect 6 units of rainwater in the valleys between peaks.</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> elevation = [4,2,0,3,2,5]<br><strong>Output:</strong> 9</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>n == elevation.length</code></li><li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li><li><code>0 &lt;= elevation[i] &lt;= 10<sup>5</sup></code></li></ul>"
        },
        {
            "id": 43,
            "rewrittenDescription": "<p>You are given two non-negative integers <code>first</code> and <code>second</code> as strings. Calculate their multiplication result and return it as a string.</p><p><strong>Important:</strong> You cannot use built-in big number libraries or convert the strings directly to integers.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> first = \"2\", second = \"3\"<br><strong>Output:</strong> \"6\"</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> first = \"123\", second = \"456\"<br><strong>Output:</strong> \"56088\"</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= first.length, second.length &lt;= 200</code></li><li><code>first</code> and <code>second</code> contain only digits.</li><li>Neither <code>first</code> nor <code>second</code> has leading zeros, except for the value <code>0</code>.</li></ul>"
        },
        {
            "id": 44,
            "rewrittenDescription": "<p>Create a pattern matching system for strings with special wildcard characters. Given a text string (<code>text</code>) and a pattern (<code>pattern</code>), determine if they match completely using these rules:</p><ul><li><code>'?'</code> - Matches exactly one character</li><li><code>'*'</code> - Matches zero or more characters</li></ul><p>The pattern must match the <strong>entire</strong> text string.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> text = \"aa\", pattern = \"a\"<br><strong>Output:</strong> false<br><strong>Explanation:</strong> Pattern \"a\" cannot match the complete string \"aa\".</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> text = \"aa\", pattern = \"*\"<br><strong>Output:</strong> true<br><strong>Explanation:</strong> '*' can match any sequence including \"aa\".</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> text = \"cb\", pattern = \"?a\"<br><strong>Output:</strong> false<br><strong>Explanation:</strong> '?' matches 'c', but 'a' doesn't match 'b'.</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= text.length, pattern.length &lt;= 2000</code></li><li><code>text</code> contains only lowercase English letters.</li><li><code>pattern</code> contains only lowercase English letters, <code>'?'</code> or <code>'*'</code>.</li></ul>"
        },
        {
            "id": 45,
            "rewrittenDescription": "<p>You have an array <code>steps</code> where you start at position <code>0</code>. Each element <code>steps[i]</code> tells you the maximum distance you can move forward from that position.</p><p>Find the minimum number of moves needed to reach the final position. It's guaranteed that the destination is reachable.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> steps = [2,3,1,1,4]<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> Move 1 step to index 1, then move 3 steps to reach the end.</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> steps = [2,3,0,1,4]<br><strong>Output:</strong> 2</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= steps.length &lt;= 10<sup>4</sup></code></li><li><code>0 &lt;= steps[i] &lt;= 1000</code></li><li>The final position is always reachable.</li></ul>"
        },
        {
            "id": 46,
            "rewrittenDescription": "<p>Given an array <code>elements</code> containing unique integers, generate all possible <span data-keyword=\"permutation-array\">arrangements</span> of these elements. Return the result in <strong>any order</strong>.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> elements = [1,2,3]<br><strong>Output:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> elements = [0,1]<br><strong>Output:</strong> [[0,1],[1,0]]</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> elements = [1]<br><strong>Output:</strong> [[1]]</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= elements.length &lt;= 6</code></li><li><code>-10 &lt;= elements[i] &lt;= 10</code></li><li>All values in <code>elements</code> are <strong>distinct</strong>.</li></ul>"
        },
        {
            "id": 47,
            "rewrittenDescription": "<p>Given an array <code>numbers</code> that may contain duplicate values, return <em>all unique arrangements possible <strong>in any order</strong></em>.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> numbers = [1,1,2]<br><strong>Output:</strong><br>[[1,1,2],<br> [1,2,1],<br> [2,1,1]]</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> numbers = [1,2,3]<br><strong>Output:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= numbers.length &lt;= 8</code></li><li><code>-10 &lt;= numbers[i] &lt;= 10</code></li></ul>"
        },
        {
            "id": 48,
            "rewrittenDescription": "<p>Given a square <code>grid</code> representing a 2D image, rotate it <strong>90 degrees clockwise</strong>.</p><p>You must perform this rotation <strong>in-place</strong> without creating a new matrix.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> grid = [[1,2,3],[4,5,6],[7,8,9]]<br><strong>Output:</strong> [[7,4,1],[8,5,2],[9,6,3]]</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> grid = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]<br><strong>Output:</strong> [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>n == grid.length == grid[i].length</code></li><li><code>1 &lt;= n &lt;= 20</code></li><li><code>-1000 &lt;= grid[i][j] &lt;= 1000</code></li></ul>"
        },
        {
            "id": 49,
            "rewrittenDescription": "<p>Given an array of strings <code>words</code>, organize them into groups where each group contains words that are <span data-keyword=\"anagram\">rearrangements</span> of each other. Return the groups in <strong>any order</strong>.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><div class=\"example-block\"><p><strong>Input:</strong> <span class=\"example-io\">words = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]</span></p><p><strong>Output:</strong> <span class=\"example-io\">[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]</span></p><p><strong>Explanation:</strong></p><ul><li>\"bat\" cannot be rearranged to form any other word.</li><li>\"nat\" and \"tan\" are rearrangements of each other.</li><li>\"ate\", \"eat\", and \"tea\" are all rearrangements of each other.</li></ul></div><p><strong class=\"example\">Example 2:</strong></p><div class=\"example-block\"><p><strong>Input:</strong> <span class=\"example-io\">words = [\"\"]</span></p><p><strong>Output:</strong> <span class=\"example-io\">[[\"\"]]</span></p></div><p><strong class=\"example\">Example 3:</strong></p><div class=\"example-block\"><p><strong>Input:</strong> <span class=\"example-io\">words = [\"a\"]</span></p><p><strong>Output:</strong> <span class=\"example-io\">[[\"a\"]]</span></p></div><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li><li><code>0 &lt;= words[i].length &lt;= 100</code></li><li><code>words[i]</code> consists of lowercase English letters only.</li></ul>"
        },
        {
            "id": 50,
            "rewrittenDescription": "<p>Create a function that computes <code>base</code> raised to the power of <code>exponent</code> (i.e., <code>base<sup>exponent</sup></code>).</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> base = 2.00000, exponent = 10<br><strong>Output:</strong> 1024.00000</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> base = 2.10000, exponent = 3<br><strong>Output:</strong> 9.26100</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> base = 2.00000, exponent = -2<br><strong>Output:</strong> 0.25000<br><strong>Explanation:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>-100.0 &lt; base &lt; 100.0</code></li><li><code>-2<sup>31</sup> &lt;= exponent &lt;= 2<sup>31</sup>-1</code></li><li><code>exponent</code> is an integer.</li><li>Either <code>base</code> is not zero or <code>exponent &gt; 0</code>.</li><li><code>-10<sup>4</sup> &lt;= base<sup>exponent</sup> &lt;= 10<sup>4</sup></code></li></ul>"
        },
        {
            "id": 51,
            "rewrittenDescription": "<p>The <strong>Royal Guard Challenge</strong> involves placing <code>n</code> guards on an <code>n x n</code> fortress grid such that none can attack each other diagonally, horizontally, or vertically.</p><p>Given an integer <code>n</code>, return <em>all valid guard placement configurations</em>. You may return the solutions in <strong>any order</strong>.</p><p>Each solution shows a guard arrangement where <code>'G'</code> represents a guard and <code>'.'</code> represents an empty position.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> n = 4<br><strong>Output:</strong> [[\".G..\",\"...G\",\"G...\",\"..G.\"],[\".G.\",\"G...\",\"...G\",\".G..\"]]<br><strong>Explanation:</strong> There are two valid solutions for the 4-guard challenge.</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> n = 1<br><strong>Output:</strong> [[\"G\"]]</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 9</code></li></ul>"
        },
        {
            "id": 52,
            "rewrittenDescription": "<p>The <strong>Royal Guard Challenge</strong> requires placing <code>n</code> guards on an <code>n x n</code> fortress grid such that none can attack each other.</p><p>Given an integer <code>n</code>, return <em>the total count of valid guard placement arrangements</em>.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> n = 4<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> There are exactly two valid solutions for placing 4 guards.</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> n = 1<br><strong>Output:</strong> 1</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 9</code></li></ul>"
        },
        {
            "id": 53,
            "rewrittenDescription": "<p>Given an integer array <code>data</code>, find the <span data-keyword=\"subarray-nonempty\">contiguous subsequence</span> that has the maximum sum, and return <em>that sum</em>.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> data = [-2,1,-3,4,-1,2,1,-5,4]<br><strong>Output:</strong> 6<br><strong>Explanation:</strong> The contiguous subsequence [4,-1,2,1] produces the maximum sum of 6.</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> data = [1]<br><strong>Output:</strong> 1<br><strong>Explanation:</strong> The single element [1] has the maximum sum.</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> data = [5,4,-1,7,8]<br><strong>Output:</strong> 23<br><strong>Explanation:</strong> The entire array [5,4,-1,7,8] gives the maximum sum of 23.</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= data.length &lt;= 10<sup>5</sup></code></li><li><code>-10<sup>4</sup> &lt;= data[i] &lt;= 10<sup>4</sup></code></li></ul><p>&nbsp;</p><p><strong>Follow up:</strong> If you've solved this in <code>O(n)</code> time, try implementing a <strong>divide and conquer</strong> approach for an additional challenge.</p>"
        },
        {
            "id": 54,
            "rewrittenDescription": "<p>Given a rectangular <code>grid</code> with dimensions <code>m x n</code>, return <em>all elements traversed in a clockwise spiral pattern</em>.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> grid = [[1,2,3],[4,5,6],[7,8,9]]<br><strong>Output:</strong> [1,2,3,6,9,8,7,4,5]</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]<br><strong>Output:</strong> [1,2,3,4,8,12,11,10,9,5,6,7]</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 10</code></li><li><code>-100 &lt;= grid[i][j] &lt;= 100</code></li></ul>"
        },
        {
            "id": 55,
            "rewrittenDescription": "<p>You have an integer array <code>distances</code> where you start at the beginning. Each element represents the maximum distance you can travel forward from that position.</p><p>Determine if you can reach the final position. Return <code>true</code> if possible, <code>false</code> otherwise.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> distances = [2,3,1,1,4]<br><strong>Output:</strong> true<br><strong>Explanation:</strong> Move 1 step to index 1, then move 3 steps to reach the end.</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> distances = [3,2,1,0,4]<br><strong>Output:</strong> false<br><strong>Explanation:</strong> You'll get stuck at index 3 since its value is 0, preventing further progress.</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= distances.length &lt;= 10<sup>4</sup></code></li><li><code>0 &lt;= distances[i] &lt;= 10<sup>5</sup></code></li></ul>"
        },
        {
            "id": 56,
            "rewrittenDescription": "<p>Given an array of <code>ranges</code> where <code>ranges[i] = [begin<sub>i</sub>, end<sub>i</sub>]</code>, combine all overlapping ranges and return <em>an array of non-overlapping ranges that represent the same coverage</em>.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> ranges = [[1,3],[2,6],[8,10],[15,18]]<br><strong>Output:</strong> [[1,6],[8,10],[15,18]]<br><strong>Explanation:</strong> Ranges [1,3] and [2,6] overlap, so they merge into [1,6].</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> ranges = [[1,4],[4,5]]<br><strong>Output:</strong> [[1,5]]<br><strong>Explanation:</strong> Ranges [1,4] and [4,5] are touching, so they combine into [1,5].</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= ranges.length &lt;= 10<sup>4</sup></code></li><li><code>ranges[i].length == 2</code></li><li><code>0 &lt;= begin<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup></code></li></ul>"
        },
        {
            "id": 57,
            "rewrittenDescription": "<p>You have a sorted array of non-overlapping <code>timeSlots</code> where <code>timeSlots[i] = [begin<sub>i</sub>, end<sub>i</sub>]</code>. You need to add a <code>newSlot = [start, end]</code> while maintaining the sorted order and ensuring no overlaps exist.</p><p>Return the updated time slots array after insertion, merging overlapping slots when necessary.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> timeSlots = [[1,3],[6,9]], newSlot = [2,5]<br><strong>Output:</strong> [[1,5],[6,9]]</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> timeSlots = [[1,2],[3,5],[6,7],[8,10],[12,16]], newSlot = [4,8]<br><strong>Output:</strong> [[1,2],[3,10],[12,16]]<br><strong>Explanation:</strong> The new slot [4,8] overlaps with [3,5],[6,7],[8,10] so they all merge.</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= timeSlots.length &lt;= 10<sup>4</sup></code></li><li><code>timeSlots[i].length == 2</code></li><li><code>0 &lt;= begin<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>5</sup></code></li><li><code>timeSlots</code> is sorted by <code>begin<sub>i</sub></code> in <strong>ascending</strong> order.</li><li><code>newSlot.length == 2</code></li><li><code>0 &lt;= start &lt;= end &lt;= 10<sup>5</sup></code></li></ul>"
        },
        {
            "id": 58,
            "rewrittenDescription": "<p>Given a string <code>sentence</code> containing words separated by spaces, return <em>the character count of the final word</em>.</p><p>A <strong>word</strong> is defined as a sequence of non-space characters.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> sentence = \"Hello World\"<br><strong>Output:</strong> 5<br><strong>Explanation:</strong> The final word is \"World\" which has 5 characters.</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> sentence = \"   fly me   to   the moon  \"<br><strong>Output:</strong> 4<br><strong>Explanation:</strong> The final word is \"moon\" with 4 characters.</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> sentence = \"luffy is still joyboy\"<br><strong>Output:</strong> 6<br><strong>Explanation:</strong> The final word is \"joyboy\" containing 6 characters.</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= sentence.length &lt;= 10<sup>4</sup></code></li><li><code>sentence</code> consists of English letters and spaces only.</li><li>At least one word exists in <code>sentence</code>.</li></ul>"
        },
        {
            "id": 59,
            "rewrittenDescription": "<p>Given a positive integer <code>size</code>, create a <code>size x size</code> <code>table</code> filled with consecutive numbers from <code>1</code> to <code>size<sup>2</sup></code> arranged in a clockwise spiral pattern.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> size = 3<br><strong>Output:</strong> [[1,2,3],[8,9,4],[7,6,5]]</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> size = 1<br><strong>Output:</strong> [[1]]</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= size &lt;= 20</code></li></ul>"
        },
        {
            "id": 60,
            "rewrittenDescription": "<p>Consider the ordered set <code>[1, 2, 3, ..., n]</code> which has <code>n!</code> total arrangements when all elements are rearranged.</p><p>When these arrangements are listed in lexicographical order, they form a sequence. For <code>n = 3</code>:</p><ol><li><code>\"123\"</code></li><li><code>\"132\"</code></li><li><code>\"213\"</code></li><li><code>\"231\"</code></li><li><code>\"312\"</code></li><li><code>\"321\"</code></li></ol><p>Given <code>n</code> and <code>position</code>, return the arrangement at the specified position in this sequence.</p><p>&nbsp;</p><p><strong class=\"example\">Example 1:</strong></p><pre><strong>Input:</strong> n = 3, position = 3<br><strong>Output:</strong> \"213\"</pre><p><strong class=\"example\">Example 2:</strong></p><pre><strong>Input:</strong> n = 4, position = 9<br><strong>Output:</strong> \"2314\"</pre><p><strong class=\"example\">Example 3:</strong></p><pre><strong>Input:</strong> n = 3, position = 1<br><strong>Output:</strong> \"123\"</pre><p>&nbsp;</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 9</code></li><li><code>1 &lt;= position &lt;= n!</code></li></ul>"
        }
    ]
}